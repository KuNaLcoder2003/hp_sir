// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_c1grXtLTnO4s@ep-square-rice-a1c3tqmi-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

model Student {
  id         Int               @id @unique @default(autoincrement())
  first_name String            @db.VarChar(100)
  last_name  String            @db.VarChar(100)
  email      String            @unique @db.VarChar(100)
  password   String            @db.VarChar(200)
  avatar     String            @default("")
  batchId    Int
  permitted  Boolean           @default(false)
  batch      Batch             @relation(fields: [batchId], references: [id])
  subjects   StudentSubjects[]
  results Results[]
}

model Batch {
  id                Int               @id @unique @default(autoincrement())
  batch_name        String            @db.VarChar(200)
  duration          Int               @default(12)
  students          Student[]
  subjects          Subjects[]
  students_subjects StudentSubjects[]
  file Files[]
  test Test[]
}

model Subjects {
  id           Int               @id @unique @default(autoincrement())
  subject_name String            @db.VarChar(100)
  batchId      Int
  batch        Batch             @relation(fields: [batchId], references: [id])
  contents     Content[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  students     StudentSubjects[]
  file Files[]
  test Test[]
}

model Content {
  id           Int      @id @unique @default(autoincrement())
  content_name String   @db.VarChar(200)
  subjectId    Int
  subject      Subjects @relation(fields: [subjectId], references: [id])
  content_url  String
  type         String
  uploaded_on  DateTime @default(now())
}

model StudentSubjects {
  subjectId    Int
  subject      Subjects @relation(fields: [subjectId], references: [id])
  studentEmail String
  batchId      Int
  batch        Batch    @relation(fields: [batchId], references: [id] , onDelete: Cascade)
  student      Student  @relation(fields: [studentEmail], references: [email] , onDelete: Cascade)

  @@id([studentEmail, subjectId])
}

model Teacher {
  id         Int               @id @unique @default(autoincrement())
  first_name String            @db.VarChar(200)
  last_name String             @db.VarChar(200)
  email     String             @unique @db.VarChar(100)
  password  String             @db.VarChar(200)
}

model Test{
  id         Int               @id @unique @default(autoincrement())
  test_name String             @db.VarChar(200)
  subject_id Int                
  subject    Subjects @relation(fields: [subject_id ], references: [id] , onDelete: Cascade)
  batch_id Int
  batch Batch @relation(fields: [batch_id] , references: [id] , onDelete: Cascade)
  date DateTime 
  resuluts Results[]
}

model Results {
  // id         Int               @id @unique @default(autoincrement())
  test_id Int 
  tests Test @relation(fields: [test_id] , references: [id])
  student_id Int 
  student Student @relation(fields: [student_id] , references: [id] , onDelete:  Cascade)
  marks Int @default(0)
  attempted Boolean @default(false)
  date DateTime 
  @@id([student_id , test_id])
}

model Files {
  id         Int               @id @unique @default(autoincrement())
  file_name  String            @db.VarChar(200)
  file_url   String            
  batch_id   Int
  batch      Batch  @relation(fields: [batch_id] , references: [id])
  subject_id Int
  subject Subjects @relation(fields: [subject_id] , references: [id])
}

model Doubts {
  id         Int               @id @unique @default(autoincrement())
  user_email String @db.VarChar(200)
  doubt_type String @db.VarChar(200)
  class String @db.VarChar(200)
  completed Boolean @default(false)
  meeting_id String @default("")
  request_accepted Boolean @default(false)
  date DateTime
  meetings Meeting[]
  slot_id Int
  slot Slot @relation(fields: [slot_id] , references: [id])
  hashed_id String @default("")
}
model Meeting {
  id         Int               @id @unique @default(autoincrement())
  meeting_id String @default("")
  join_url String @default("")
  date DateTime 
  doubt_id Int @unique
  doubt Doubts @relation(fields: [doubt_id] , references: [id])
  completed Boolean @default(false)
  user_email String @db.VarChar(200)
  start_url String 
  joinTime String
  slot_id Int
  slot Slot @relation(fields: [slot_id] , references: [id])
  meeting_password String 
}

model Slot {
  id          Int       @id @default(autoincrement())
  week_id Int
  week_number Int
  week Week @relation(fields: [week_id] , references: [id])
  day String
  time String
  duration Int @default(15)
  slot_booked Boolean @default(false)
  doubts Doubts[]
  meetings Meeting[]
}

model Week {
  id          Int       @id @default(autoincrement())
  week_no Int @unique @default(autoincrement())
  completed Boolean @default(false)
  slots Slot[]
  week_name String @db.VarChar(200)
}


